<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.tony.mybatis" />

	<!-- <context:property-placeholder location="jdbc.properties"/> -->

	<!-- <beans:bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<beans:property name="location" value="/WEB-INF/spring/jdbc.properties" /> 
		<beans:property name="fileEncoding" value="utf-8" /> </beans:bean> -->

	<!-- postgresql -->
<!-- 	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<beans:property name="driverClass" value="org.postgresql.Driver" />
		<beans:property name="jdbcUrl"
			value="jdbc:postgresql://127.0.0.1:5432/mybatis_demo" />
		<beans:property name="user" value="postgres" />
		<beans:property name="password" value="123456" />
	</beans:bean>
	 -->
	<!-- oracle -->
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<beans:property name="driverClass" value="oracle.jdbc.OracleDriver" />
		<beans:property name="jdbcUrl"
			value="jdbc:oracle:thin:@127.0.0.1:1521:testdb" />
		<beans:property name="user" value="loantest" />
		<beans:property name="password" value="123456" />
	</beans:bean>

	<!-- sessionFactory 将spring和mybatis整合 -->
	<beans:bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<!-- 多个package用逗号或分号隔开 -->
		<beans:property name="typeAliasesPackage" value="com.tony.mybatis.core.entity" />
		<beans:property name="configLocation"
			value="/WEB-INF/spring/mybatis-config.xml" />
		<beans:property name="mapperLocations"
			value="classpath*:com/tony/mybatis/core/dao/*.xml" />
	</beans:bean>

	<beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 多个package用逗号或分号隔开 -->
		<beans:property name="basePackage" value="com.tony.mybatis.core.dao.**" />
		<beans:property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />

	</beans:bean>
	
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- 异步线程池 -->
	<beans:bean id="threadPool"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<beans:property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<beans:property name="maxPoolSize" value="1000" />
		<!-- 队列最大长度 >=mainExecutor.maxSize -->
		<beans:property name="queueCapacity" value="200" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<beans:property name="keepAliveSeconds" value="30000" />
		<beans:property name="waitForTasksToCompleteOnShutdown"
			value="true" />
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃. -->
		<beans:property name="rejectedExecutionHandler">
			<beans:bean
				class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</beans:property>
	</beans:bean>

</beans:beans>
